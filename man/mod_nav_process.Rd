% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_nav_process.R
\name{mod_nav_process_ui}
\alias{mod_nav_process_ui}
\alias{mod_nav_process_server}
\title{xxx}
\usage{
mod_nav_process_ui(id)

mod_nav_process_server(
  id,
  dataIn = reactive({     NULL }),
  is.enabled = reactive({     TRUE }),
  remoteReset = reactive({     FALSE }),
  is.skipped = reactive({     FALSE })
)
}
\arguments{
\item{id}{xxx}

\item{dataIn}{The dataset}

\item{is.enabled}{A boolean. This variable is a remote command to specify
if the corresponding module is enabled/disabled in the calling module of upper level.
For example, if this module is part of a pipeline and the pipeline calculates
that it is disabled (i.e. skipped), then this variable is set to TRUE. Then,
all the widgets will be disabled. If not, the enabling/disabling of widgets
is deciding by this module.}

\item{remoteReset}{It is a remote command to reset the module. A boolen that 
indicates is the pipeline has been reseted by a program of higher level
Basically, it is the program which has called this module}

\item{is.skipped}{xxx}
}
\value{
A list of four items:
* dataOut xxx
* steps.enabled xxxxx
* status xxxx
* reset xxxx
}
\description{
This module contains the configuration informations for the corresponding pipeline.
It is called by the nav_pipeline module of the package Magellan

xxx
}
\examples{
\dontrun{
library(shiny)
library(shinyBS)
ui <- fluidPage(
  mod_nav_process_ui('Protein_Description')
)
server <- function(input, output){
  mod_nav_process_server(id = 'Protein_Description',
                         dataIn = reactive({feat1})
  )
}
shinyApp(ui, server)
}

}
