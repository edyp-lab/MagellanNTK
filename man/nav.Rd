% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core.R
\name{nav}
\alias{nav}
\alias{nav_ui}
\alias{nav_server}
\title{The server() function of the module `nav`}
\usage{
nav_ui(id)

nav_server(
  id = NULL,
  dataIn = reactive({
     NULL
 }),
  is.enabled = reactive({
     TRUE
 }),
  remoteReset = reactive({
     0
 }),
  wholeReset = reactive({
     0
 }),
  is.skipped = reactive({
     FALSE
 }),
  tl.layout = NULL,
  verbose = FALSE,
  usermod = "user"
)
}
\arguments{
\item{id}{A `character(1)` which defines the id of the module. 
It is the same as for the server() function.}

\item{dataIn}{The dataset}

\item{is.enabled}{A `boolean`. This variable is a remote command to specify
if the corresponding module is enabled/disabled in the calling module of
upper level.
For example, if this module is part of a pipeline and the pipeline calculates
that it is disabled (i.e. skipped), then this variable is set to TRUE. Then,
all the widgets will be disabled. If not, the enabling/disabling of widgets
is deciding by this module.}

\item{remoteReset}{It is a remote command to reset the module. A boolen that
indicates is the pipeline has been reseted by a program of higher level
Basically, it is the program which has called this module}

\item{wholeReset}{= reactive({0}),}

\item{is.skipped}{xxx}

\item{tl.layout}{A vector of character ('h' for horizontal, 'v' for vertical)
where each item correspond to the orientation of the timeline for a given
level of navigation module.}

\item{verbose}{= FALSE,}

\item{usermod}{= 'user'}
}
\value{
A list of four items:
* dataOut A dataset of the same class of the parameter dataIn
* steps.enabled A vector of `boolean` of the same length than config@steps
* status A vector of `integer(1)` of the same length than the config@steps
  vector
* reset xxxx
}
\description{
The module navigation can be launched via a Shiny app. 
This is the core module of MagellanNTK
}
\examples{
\dontrun{
library(shiny)
server_env <- environment() # will see all dtwclust functions
server_env$dev_mode <- FALSE

# Uncomment and Change this for a process workflow
# name <- 'PipelineDemo_Process1'
#name <- 'PipelineDemo_Description'
# layout <- c('h')


# Uncomment and Change this for a pipeline workflow
name <- 'PipelineDemo'
layout <- c('v', 'h')


path <- system.file('workflow', package='MagellanNTK')
files <- list.files(file.path(path, name, 'R'), full.names = TRUE)
for(f in files)
  source(f, local = TRUE, chdir = TRUE)



ui <- fluidPage(
  tagList(
    fluidRow(
      column(width=2, actionButton('simReset', 'Remote reset',  class='info')),
      column(width=2, actionButton('simEnabled', 'Remote enable/disable', class='info')),
      column(width=2, actionButton('simSkipped', 'Remote is.skipped', class='info'))
    ),
    hr(),
    uiOutput('UI'),
    uiOutput('debugInfos_ui')
  )
)

server <- function(input, output){
  
  data(sub_R25)
  
  rv <- reactiveValues(
    dataIn = sub_R25,
    dataOut = NULL
  )
  
  
  
  output$UI <- renderUI({nav_ui(name)})
  
  output$debugInfos_ui <- renderUI({
    req(dev_mode)
    Debug_Infos_server(id = 'debug_infos',
      title = 'Infos from shiny app',
      rv.dataIn = reactive({rv$dataIn}),
      dataOut = reactive({rv$dataOut$dataOut()})
    )
    Debug_Infos_ui('debug_infos')
  })
  
  
  
  observe({
    rv$dataOut <- nav_server(id = name,
      dataIn = reactive({rv$dataIn}),
      remoteReset = reactive({input$simReset}),
      is.skipped = reactive({input$simSkipped\%\%2 != 0}),
      is.enabled = reactive({input$simEnabled\%\%2 == 0}),
      tl.layout = layout)
  })
}



shiny::shinyApp(ui, server)


}

}
\author{
Samuel Wieczorek
}
