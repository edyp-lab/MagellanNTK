% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_nav_process.R
\name{mod_nav_process_server}
\alias{mod_nav_process_server}
\title{xxx}
\usage{
mod_nav_process_server(
  id,
  dataIn = reactive({     NULL }),
  is.enabled = reactive({     TRUE }),
  remoteReset = reactive({     FALSE }),
  is.skipped = reactive({     FALSE })
)
}
\arguments{
\item{id}{xxx}

\item{dataIn}{The dataset}

\item{is.enabled}{A boolean. This variable is a remote command to specify
if the corresponding module is enabled/disabled in the calling module of upper level.
For example, if this module is part of a pipeline and the pipeline calculates
that it is disabled (i.e. skipped), then this variable is set to TRUE. Then,
all the widgets will be disabled. If not, the enabling/disabling of widgets
is deciding by this module.}

\item{remoteReset}{It is a remote command to reset the module. A boolen that 
indicates is the pipeline has been reseted by a program of higher level
Basically, it is the program which has called this module}

\item{is.skipped}{xxx}
}
\value{
A list of four items:
* dataOut xxx
* steps.enabled xxxxx
* status xxxx
* reset xxxx
}
\description{
This module contains the configuration informations for the corresponding pipeline.
It is called by the nav_pipeline module of the package Magellan
}
\section{Fields}{

\describe{
\item{\code{modal_txt}}{This text is showed in the modal when the user click on the 'Reset' button.

  Send_Result_to_Caller()
w.r.t predefined rules (each of these buttons are disabled if there is}
}}

\examples{
library(shiny)
library(shinyBS)
library(MSPipelines)
ui <- fluidPage(
  mod_nav_process_ui('Protein_Description')
)
server <- function(input, output){
  utils::data(Exp1_R25_prot, package='DAPARdata2')
  mod_nav_process_server(id = 'Protein_Description',
                         dataIn = reactive({Exp1_R25_prot})
  )
}
shinyApp(ui, server)

# Reactive values that will be used to output the current dataset when 
# the last step is validated
dataOut <- reactiveValues(
  trigger = NULL,
  value = NULL
)


#These reactive values are specific to this instance of mod_nav_process_server
rv.process <- reactiveValues(
  #' @field proc contains the return value of the process module that has been called 
  proc = NULL,
  
  #' @field status A booelan vector which contains the status (validated,
  #' skipped or undone) of the steps
  status = NULL,
  
  #' @field dataIn Contains the dataset passed by argument to the module server
  dataIn = NULL,
  
  #' @field temp.dataIn This variable is used to serves as a tampon between 
  #' the input of the module and the functions. 
  temp.dataIn = NULL,
  
  #' @field steps.enabled Contains the value of the parameter 'is.enabled'
  steps.enabled = NULL,
  
  #' @field current.pos Stores the current cursor position in the timeline and 
  #' indicates which of the process' steps is active
  current.pos = 1,
  
  length = NULL,
  config = NULL
)
}
\author{
Samuel Wieczorek
}
