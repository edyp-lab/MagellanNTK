

#' @title xxx
#' 
#' @description 
#' xxxxxx
#' 
#' @noRd
#' 
#' @export
#'
mod_nav_pipeline_ui <- function(id){
  ns <- NS(id)
  tagList(
    shinyjs::useShinyjs(),
    uiOutput(ns('nav_mod_ui')),
    mod_Debug_Infos_ui(ns('debug_infos'))
  )
}



#' @title xxx
#' 
#' @description 
#' xxxxxx
#' 
#' @param id xxx
#' 
#' @param dataIn xxx
#' @param is.enabled xxx
#' @param remoteReset xxx
#' @param is.skipped xxx
#' 
#' @export
#' 
#' @return xxx
#' 
#' @examples 
#' \donttest{
#' library(shiny)
#' library(shinyBS)
#' library(crayon)
#' ui <- fluidPage(
#'   mod_nav_pipeline_ui('Protein')
#' )
#' server <- function(input, output){
#' mod_nav_pipeline_server(id = 'Protein',
#'                           dataIn = reactive({QFeatures::feat1})
#'   )
#' }
#' shinyApp(ui, server)
#' }
#' 
mod_nav_pipeline_server <- function(id,
                                   dataIn = reactive({NULL}),
                                   is.enabled = reactive({TRUE}),
                                   remoteReset = reactive({FALSE}),
                                   is.skipped = reactive({FALSE})
){
  
  nav.mode <- "pipeline"
  
  ###-------------------------------------------------------------###
  ###                                                             ###
  ### ------------------- MODULE SERVER --------------------------###
  ###                                                             ###
  ###-------------------------------------------------------------###
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    
    eval(str2expression(GetCode_Declare_Pipeline_reactiveValues()))
    eval(str2expression(GetCode_Declare_reactiveValues()))
    
    
    switch (nav.mode,
            pipeline = {
              
              eval(str2expression(GetCode_Update_Data2send_Vector()))
              eval(str2expression(GetCode_PrepareData2Send()))
              
              # Catch the dataset returned by the process module. The event is 
              # observed by a change in the 'trigger' value
              # and instantiate the rv$dataOut variable
              # which is the return value of the module.
              # This function is only used to communicate between the process module 
              # and and the caller
              eval(str2expression(GetCode_ActionOn_Data_Trigger()))
              
              eval(str2expression(GetCode_ActionOn_NewPosition()))
              eval(str2expression(GetCode_observeEvent_currentPos_pipeline()))
              
              # Catch the returned values of the process 
              eval(str2expression(GetCode_observeEvent_returnValuesOfProcesses()))
              
              eval(str2expression(GetCode_ResetChildren()))
              
            },
            process = {
              
              eval(str2expression(GetCode_observeEvent_dataOut_trigger()))
              eval(str2expression(GetCode_observeEvent_currentPos_process()))
              
              # Catches a new value of the cursor position
              eval(str2expression(GetCode_observeEvent_rv_position()))
              
            }
    )
    
    output$nav_mod_ui <- renderUI({
      # Launch the renderUI function for the user interface of the module
      req(nav.mode)
      FUN <- paste0('GetCode_', nav.mode, '_ui')
      eval(str2expression(do.call(FUN, list())))
    })

    
    eval(str2expression(GetCode_observeEvent_dataIn()))
    eval(str2expression(GetCode_Send_Result_to_Caller()))
    eval(str2expression(GetCode_Update_State_Screens()))
    eval(str2expression(GetCode_EncapsulateScreens()))
    eval(str2expression(GetCode_GetStringStatus()))
    eval(str2expression(GetCode_GetMaxValidated_AllSteps()))
    eval(str2expression(GetCode_GetMaxValidated_BeforePos()))
    eval(str2expression(GetCode_GetFirstMandatoryNotValidated()))
    eval(str2expression(GetCode_Change_Current_Pos())) 
    eval(str2expression(GetCode_Set_All_Skipped()))
    eval(str2expression(GetCode_Unskip_All_Steps()))
    eval(str2expression(GetCode_Discover_Skipped_Steps()))
    eval(str2expression(GetCode_dataModal()))
    eval(str2expression(GetCode_ToggleState_ResetBtn()))
    eval(str2expression(GetCode_NavPage_Managment()))
    eval(str2expression(GetCode_observeEvent_stepsStatus()))
    eval(str2expression(GetCode_observeEvent_isEnabled()))
    eval(str2expression(GetCode_observeEvent_isSkipped()))
    eval(str2expression(GetCode_observeEvent_rstBtn()))
    eval(str2expression(GetCode_observeEvent_remoteReset()))
    eval(str2expression(GetCode_observeEvent_modal_ok()))
    eval(str2expression(GetCode_LocalReset()))
    eval(str2expression(GetCode_ToggleState_Screens()))
    eval(str2expression(GetCode_ToggleState_NavBtns()))
    FUN <- paste0('GetCode_Init_', nav.mode, '_Server')
    eval(str2expression(do.call(FUN, list())))
    eval(str2expression(GetCode_CurrentStepName()))
    
    # Show/hide an information panel if the process is entirely skipped
    # This functions can be used for both nav_process and nav_pipeline modules
    eval(str2expression(GetCode_SkippedInfoPanel_UI()))
    
    eval(str2expression(GetCode_EncapsulateScreens()))
    
  
    mod_Debug_Infos_server(id = 'debug_infos',
                           title = paste0('Infos from pipeline : ', id),
                           config = reactive({rv$config}),
                           rv.dataIn = reactive({rv$dataIn}),
                           dataIn = reactive({dataIn()}),
                           dataOut = reactive({dataOut}),
                           steps.status = reactive({rv$steps.status}),
                           current.pos = reactive({ rv$current.pos}),
                           steps.enabled = reactive({rv$steps.enabled}),
                           is.enabled = reactive({is.enabled()}))
    
    
    
    
    list(dataOut = reactive({dataOut}),
         steps.enabled = reactive({rv$steps.enabled}),
         status = reactive({rv$steps.status})
         )
    
  }
  )
}